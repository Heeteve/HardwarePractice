C51 COMPILER V9.60.7.0   A14_UART                                                          12/26/2023 17:57:11 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE A14_UART
OBJECT MODULE PLACED IN .\Objects\A14_uart.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Driver\A14_uart.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\User;.\System)
                    - DEBUG OBJECTEXTEND PRINT(.\Listings\A14_uart.lst) TABS(2) OBJECT(.\Objects\A14_uart.obj)

line level    source

   1          #include "global.h"                  // Device heade
   2          
   3          
   4          #define UART1_MAXBUFLEN (40)
   5          #if (UART1_MAXBUFLEN>255)
              #error "UART buffer must be less than 256 bytes because of head/rear data size is 8-bit unsigned char."
              #endif
   8          
   9          static volatile struct _uart_param_tag{
  10            uint8_t front;
  11            uint8_t rear;
  12            char buffer[UART1_MAXBUFLEN];
  13          } g_uart1_param;
  14          
  15          /**
  16            * @brief  串口1初始化
  17            * @param  t_baud：串口波特率
  18            * @retval None
  19            */
  20          void Usart1_Init(uint16_t t_baud) {
  21   1        COMx_InitDefine USART_InitStructure;
  22   1        USART_InitStructure.UART_Mode = UART_8bit_BRTx;//模式, UART_ShiftRight,UART_8bit_BRTx,UART_9bit,UART_9bit
             -_BRTx
  23   1        USART_InitStructure.UART_BRT_Use = BRT_Timer2;//选择波特率发生器, BRT_Timer1, BRT_Timer2 (注意: 串口2固定
             -使用BRT_Timer2)
  24   1        USART_InitStructure.UART_BaudRate = t_baud;   //波特率, 一般 110 ~ 115200
  25   1        USART_InitStructure.UART_RxEnable = ENABLE;   //接收允许,   ENABLE或DISABLE
  26   1        USART_InitStructure.BaudRateDouble = DISABLE; //波特率加倍, ENABLE或DISABLE
  27   1        USART_InitStructure.UART_Interrupt = ENABLE;  //中断使能, ENABLE/DISABLE;
  28   1        USART_InitStructure.UART_Polity = PolityHigh; //优先级,     PolityLow,PolityHigh
  29   1        USART_InitStructure.UART_P_SW = UART1_SW_P36_P37;//切换端口,   UART1_SW_P30_P31,UART1_SW_P36_P37,UART1_SW
             -_P16_P17(必须使用内部时钟)
  30   1        USART_Init(USART1, &USART_InitStructure);
  31   1      }
  32          
  33          uint8_t uart1_Read(void *vbuf,uint8_t len)
  34          {
  35   1        uint8_t i = 0;
  36   1        char *buf = (char *)vbuf;
  37   1        for(i-0; i<len; i++)
  38   1        {
  39   2          EA = 0;
  40   2          if(g_uart1_param.front == g_uart1_param.rear)
  41   2          {
  42   3            EA = 1;//列队空，不执行出队操作
  43   3            break;
  44   3          }
  45   2          buf[i] = g_uart1_param.buffer[g_uart1_param.front];
  46   2          g_uart1_param.front = (g_uart1_param.front + 1) % UART1_MAXBUFLEN;
  47   2          EA = 1;
  48   2          _nop_();
  49   2        }
  50   1        return i;
  51   1      }
C51 COMPILER V9.60.7.0   A14_UART                                                          12/26/2023 17:57:11 PAGE 2   

  52          
  53          void uart1_Write(const void *vbuf,uint8_t len)
  54          {
  55   1        uint8_t i;
  56   1        const char *buf = (const char*)vbuf;
  57   1        for(i=0; i<len; i++)
  58   1        {
  59   2          SBUF = buf[i];
  60   2          while(TI == 0);
  61   2          TI = 0;
  62   2        }
  63   1      }
  64          
  65          /********************* UART1中断函数************************/
  66          void USART1_IRQHandler (void) interrupt UART1_VECTOR
  67          {
  68   1        uint8_t val;
  69   1        if(RI)
  70   1        {
  71   2          val = SBUF;
  72   2          RI = 0;
  73   2          if( (g_uart1_param.rear + 1) % UART1_MAXBUFLEN == g_uart1_param.front )
  74   2          {
  75   3            return;//列队满
  76   3          }
  77   2          else
  78   2          {
  79   3            g_uart1_param.buffer[g_uart1_param.rear] = val;
  80   3            g_uart1_param.rear = (g_uart1_param.rear + 1) % UART1_MAXBUFLEN;
  81   3          }
  82   2        }
  83   1      }
  84          
  85          //implemented for printf()
  86          char putchar(char c)
  87          {
  88   1        SBUF = c;
  89   1        while(TI == 0);
  90   1        TI = 0;
  91   1        return c;
  92   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    339    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     42      21
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
