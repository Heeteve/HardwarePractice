C51 COMPILER V9.60.7.0   A14_TRACK                                                         12/26/2023 17:59:56 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE A14_TRACK
OBJECT MODULE PLACED IN .\Objects\A14_track.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Driver\A14_track.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\User;.\System
                    -) DEBUG OBJECTEXTEND PRINT(.\Listings\A14_track.lst) TABS(2) OBJECT(.\Objects\A14_track.obj)

line level    source

   1          
   2          #include "global.h"
   3          
   4          void IR_Track_GPIO_Init(void) {
   5   1          GPIO_InitTypeDef GPIO_InitStructure;
   6   1          GPIO_InitStructure.GPIO_Pin = IR_Track_S1_PIN;
   7   1          GPIO_InitStructure.GPIO_Mode = GPIO_HighZ;
   8   1          GPIO_Init(IR_Track_S1_PORT, &GPIO_InitStructure);
   9   1      
  10   1          GPIO_InitStructure.GPIO_Pin = IR_Track_S2_PIN;
  11   1          GPIO_InitStructure.GPIO_Mode = GPIO_HighZ;
  12   1          GPIO_Init(IR_Track_S2_PORT, &GPIO_InitStructure);
  13   1      
  14   1      
  15   1          GPIO_InitStructure.GPIO_Pin = IR_Track_S3_PIN;
  16   1          GPIO_InitStructure.GPIO_Mode = GPIO_HighZ;
  17   1          GPIO_Init(IR_Track_S3_PORT, &GPIO_InitStructure);
  18   1      
  19   1      
  20   1          GPIO_InitStructure.GPIO_Pin = IR_Track_S4_PIN;
  21   1          GPIO_InitStructure.GPIO_Mode = GPIO_HighZ;
  22   1          GPIO_Init(IR_Track_S4_PORT, &GPIO_InitStructure);
  23   1      }
  24          
  25          void Get_TrackSensor_State(uint16_t *p_S1, uint16_t *p_S2, uint16_t *p_S3, uint16_t *p_S4) {
  26   1          *p_S1 = GPIO_ReadInputDataBit(IR_Track_S1_PORT, IR_Track_S1_PIN);
  27   1          *p_S2 = GPIO_ReadInputDataBit(IR_Track_S2_PORT, IR_Track_S2_PIN);
  28   1          *p_S3 = GPIO_ReadInputDataBit(IR_Track_S3_PORT, IR_Track_S3_PIN);
  29   1          *p_S4 = GPIO_ReadInputDataBit(IR_Track_S4_PORT, IR_Track_S4_PIN);
  30   1      }
  31          
  32          void get_action_old(void) { // 稳定版
  33   1          uint16_t LL = 0, CL = 0, CR = 0, RR = 0; // 左，中左，中右，右
  34   1          Get_TrackSensor_State(&LL, &CL, &CR, &RR);
  35   1          if (LL == 1 && CL == 1 && CR == 1 && RR == 1) { //全白
  36   2              Motor_Run(TURNRIGHT, PWM_DUTY / 100 * 50);
  37   2          }
  38   1          if (LL == 0 && CL == 0 && CR == 0 && RR == 0) { //全黑
  39   2              Motor_Run(FORWARD, PWM_DUTY / 100 * 50);
  40   2          }
  41   1      
  42   1          // if (LL == 1 && CL == 0 && CR == 0 && RR == 0) { //中右黑，右转
  43   1          //     OLED_ShowString(1, 1, "LL CL CR RR");
  44   1          //     OLED_ShowString(2, 1, "0 1 1 1");
  45   1          //     turnRdeg(45);
  46   1          // }
  47   1      
  48   1          if (LL == 1 && CL == 0 && CR == 0 && RR == 1) { //中间黑
  49   2              Motor_Run(FORWARD, PWM_DUTY / 100 * 80);
  50   2          }
  51   1          if (LL == 1 && CL == 0 && CR == 1 && RR == 1) { //中左黑
  52   2              Motor_Run(TURNLEFT, PWM_DUTY / 100 * 60);
  53   2          }
  54   1      
C51 COMPILER V9.60.7.0   A14_TRACK                                                         12/26/2023 17:59:56 PAGE 2   

  55   1          if (LL == 1 && CL == 1 && CR == 0 && RR == 1) { //中右黑
  56   2              Motor_Run(TURNRIGHT, PWM_DUTY / 100 * 60);
  57   2          }
  58   1          if (LL == 1 && CL == 1 && CR == 1 && RR == 0) { //右黑
  59   2              Motor_Run(SPINTURNRIGHT, PWM_DUTY / 100 * 60);
  60   2          }
  61   1          if (LL == 0 && CL == 1 && CR == 1 && RR == 1) { //左黑
  62   2              Motor_Run(SPINTURNLEFT, PWM_DUTY / 100 * 60);
  63   2          }
  64   1      }
  65          void Get_Action(void) { // 不稳定版
  66   1          uint16_t LL = 0, CL = 0, CR = 0, RR = 0; // 左，中左，中右，右
  67   1          Get_TrackSensor_State(&LL, &CL, &CR, &RR);
  68   1          if (LL == 1 && CL == 1 && CR == 1 && RR == 1) { //全白
  69   2              Motor_Run(TURNRIGHT, PWM_DUTY / 100 * 65);
  70   2          }
  71   1          if (LL == 0 && CL == 0 && CR == 0 && RR == 0) { //全黑
  72   2              Motor_Run(FORWARD, PWM_DUTY / 100 * 82);
  73   2          }
  74   1      
  75   1          // if (LL == 1 && CL == 0 && CR == 0 && RR == 0) { //中右黑，右转
  76   1          //     OLED_ShowString(1, 1, "LL CL CR RR");
  77   1          //     OLED_ShowString(2, 1, "0 1 1 1");
  78   1          //     turnRdeg(45);
  79   1          // }
  80   1      
  81   1          if (LL == 1 && CL == 0 && CR == 0 && RR == 1) { //中间黑
  82   2              Motor_Run(FORWARD, PWM_DUTY / 100 * 82);
  83   2          }
  84   1          if (LL == 1 && CL == 0 && CR == 1 && RR == 1) { //中左黑
  85   2              Motor_Run(TURNLEFT, PWM_DUTY / 100 * 75);
  86   2          }
  87   1      
  88   1          if (LL == 1 && CL == 1 && CR == 0 && RR == 1) { //中右黑
  89   2              Motor_Run(TURNRIGHT, PWM_DUTY / 100 * 75);
  90   2          }
  91   1          if (LL == 1 && CL == 1 && CR == 1 && RR == 0) { //右黑
  92   2              Motor_Run(SPINTURNRIGHT, PWM_DUTY / 100 * 75);
  93   2          }
  94   1          if (LL == 0 && CL == 1 && CR == 1 && RR == 1) { //左黑
  95   2              Motor_Run(SPINTURNLEFT, PWM_DUTY / 100 * 75);
  96   2              DelayMs(100);
  97   2          }
  98   1      }
  99          
 100          void get_action_single(void) { //只使用RR
 101   1          uint16_t LL = 0, CL = 0, CR = 0, RR = 0; // 左，中左，中右，右
 102   1          Get_TrackSensor_State(&LL, &CL, &CR, &RR);
 103   1          if (LL == 0) {
 104   2              Motor_Run(TURNLEFT, PWM_DUTY / 100 * 60);
 105   2              DelayMs(1);
 106   2              Motor_Run(FORWARD, PWM_DUTY / 100 * 60);
 107   2              DelayMs(10);
 108   2          } else {
 109   2              OLED_ShowString(1, 1, "LL CL CR RR");
 110   2              OLED_ShowString(2, 1, "0  0  0  0");
 111   2              Motor_Run(TURNRIGHT, PWM_DUTY / 100 * 50);
 112   2          }
 113   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.60.7.0   A14_TRACK                                                         12/26/2023 17:59:56 PAGE 3   

   CODE SIZE        =   1234    ----
   CONSTANT SIZE    =     23    ----
   XDATA SIZE       =   ----      38
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
