C51 COMPILER V9.60.7.0   USART                                                             12/20/2023 11:03:57 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE USART
OBJECT MODULE PLACED IN .\Objects\USART.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE System\USART.C LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\User;.\System) DE
                    -BUG OBJECTEXTEND PRINT(.\Listings\USART.lst) TABS(2) OBJECT(.\Objects\USART.obj)

line level    source

   1          #include "USART.h"
   2          
   3          
   4          //禁止串2接收
   5          #define   TI2         (S2CON & 2) != 0
   6          #define   RI2         (S2CON & 1) != 0
   7          #define   SET_TI2()     S2CON |=  2
   8          #define   CLR_TI2()     S2CON &= ~2
   9          #define   CLR_RI2()     S2CON &= ~1
  10          #define   S2TB8_SET()     S2CON |=  8
  11          #define   S2TB8_CLR()     S2CON &= ~8
  12          #define   S2_Int_en()     IE2   |=  1   //串口2允许中断
  13          #define   S2_USE_P10P11()   P_SW2 &= ~1   //UART2 使用P1口  默认
  14          #define   S2_USE_P46P47()   P_SW2 |=  1   //UART2 使用P4口
  15          
  16          #define   S3_USE_P00P01()   P_SW2 &= ~2   //UART3 使用P0口  默认
  17          #define   S3_USE_P50P51()   P_SW2 |=  2   //UART3 使用P5口
  18          #define   S4_USE_P02P03()   P_SW2 &= ~4   //UART4 使用P0口  默认
  19          #define   S4_USE_P52P53()   P_SW2 |=  4   //UART4 使用P5口
  20          
  21          uint8_t USART_Init(uint8_t UARTx, COMx_InitDefine *COMx)
  22          {
  23   1        uint32_t  j;
  24   1        
  25   1        if(UARTx == USART1)
  26   1        {
  27   2      //    COM1.id = 1;
  28   2      //    COM1.TX_read    = 0;
  29   2      //    COM1.TX_write   = 0;
  30   2      //    COM1.B_TX_busy  = 0;
  31   2      //    COM1.RX_Cnt     = 0;
  32   2      //    COM1.RX_TimeOut = 0;
  33   2      //    COM1.B_RX_OK    = 0;
  34   2      //    for(i=0; i<COM_TX1_Lenth; i++)  TX1_Buffer[i] = 0;
  35   2      //    for(i=0; i<COM_RX1_Lenth; i++)  RX1_Buffer[i] = 0;
  36   2      
  37   2          if(COMx->UART_Mode > UART_9bit_BRTx)  return 2; //模式错误
  38   2          if(COMx->UART_Polity == PolityHigh)   PS = 1; //高优先级中断
  39   2          else                  PS = 0; //低优先级中断
  40   2          SCON = (SCON & 0x3f) | COMx->UART_Mode;
  41   2          if((COMx->UART_Mode == UART_9bit_BRTx) ||(COMx->UART_Mode == UART_8bit_BRTx)) //可变波特率
  42   2          {
  43   3            j = (CFG_SYSFREQ / 4) / COMx->UART_BaudRate;  //按1T计算
  44   3            if(j >= 65536UL)  return 2; //错误
  45   3            j = 65536UL - j;
  46   3            if(COMx->UART_BRT_Use == BRT_Timer1)
  47   3            {
  48   4              TR1 = 0;
  49   4              AUXR &= ~0x01;    //S1 BRT Use Timer1;
  50   4              TMOD &= ~(1<<6);  //Timer1 set As Timer
  51   4              TMOD &= ~0x30;    //Timer1_16bitAutoReload;
  52   4              AUXR |=  (1<<6);  //Timer1 set as 1T mode
  53   4              TH1 = (uint8_t)(j>>8);
  54   4              TL1 = (uint8_t)j;
C51 COMPILER V9.60.7.0   USART                                                             12/20/2023 11:03:57 PAGE 2   

  55   4              ET1 = 0;  //禁止中断
  56   4              TMOD &= ~0x40;  //定时
  57   4              INT_CLKO &= ~0x02;  //不输出时钟
  58   4              TR1  = 1;
  59   4            }
  60   3            else if(COMx->UART_BRT_Use == BRT_Timer2)
  61   3            {
  62   4              AUXR &= ~(1<<4);  //Timer stop
  63   4              AUXR |= 0x01;   //S1 BRT Use Timer2;
  64   4              AUXR &= ~(1<<3);  //Timer2 set As Timer
  65   4              AUXR |=  (1<<2);  //Timer2 set as 1T mode
  66   4              T2H = (uint8_t)(j>>8);
  67   4              T2L = (uint8_t)j;
  68   4              IE2  &= ~(1<<2);  //禁止中断
  69   4              AUXR &= ~(1<<3);  //定时
  70   4              AUXR |=  (1<<4);  //Timer run enable
  71   4            }
  72   3            else return 2;  //错误
  73   3          }
  74   2          else if(COMx->UART_Mode == UART_ShiftRight)
  75   2          {
  76   3            if(COMx->BaudRateDouble == ENABLE)  AUXR |=  (1<<5);  //固定波特率SysClk/2
  77   3            else                AUXR &= ~(1<<5);  //固定波特率SysClk/12
  78   3          }
  79   2          else if(COMx->UART_Mode == UART_9bit) //固定波特率SysClk*2^SMOD/64
  80   2          {
  81   3            if(COMx->BaudRateDouble == ENABLE)  PCON |=  (1<<7);  //固定波特率SysClk/32
  82   3            else                PCON &= ~(1<<7);  //固定波特率SysClk/64
  83   3          }
  84   2          if(COMx->UART_Interrupt == ENABLE)  ES = 1; //允许中断
  85   2          else                ES = 0; //禁止中断
  86   2          if(COMx->UART_RxEnable == ENABLE) REN = 1;  //允许接收
  87   2          else                REN = 0;  //禁止接收
  88   2          P_SW1 = (P_SW1 & 0x3f) | (COMx->UART_P_SW & 0xc0);  //切换IO
  89   2          if(COMx->UART_RXD_TXD_Short == ENABLE)  CLK_DIV |=  (1<<4); //内部短路RXD与TXD, 做中继, ENABLE,DISABLE
  90   2          else                  CLK_DIV &= ~(1<<4);
  91   2          return  0;
  92   2        }
  93   1      
  94   1        if(UARTx == USART2)
  95   1        {
  96   2      //    COM2.id = 2;
  97   2      //    COM2.TX_read    = 0;
  98   2      //    COM2.TX_write   = 0;
  99   2      //    COM2.B_TX_busy  = 0;
 100   2      //    COM2.RX_Cnt     = 0;
 101   2      //    COM2.RX_TimeOut = 0;
 102   2      //    COM2.B_RX_OK    = 0;
 103   2      //    for(i=0; i<COM_TX2_Lenth; i++)  TX2_Buffer[i] = 0;
 104   2      //    for(i=0; i<COM_RX2_Lenth; i++)  RX2_Buffer[i] = 0;
 105   2      
 106   2          if((COMx->UART_Mode == UART_9bit_BRTx) ||(COMx->UART_Mode == UART_8bit_BRTx)) //可变波特率
 107   2          {
 108   3            if(COMx->UART_Polity == PolityHigh)   IP2 |=  1;  //高优先级中断
 109   3            else                  IP2 &= ~1;  //低优先级中断
 110   3            if(COMx->UART_Mode == UART_9bit_BRTx) S2CON |=  (1<<7); //9bit
 111   3            else                  S2CON &= ~(1<<7); //8bit
 112   3            j = (CFG_SYSFREQ / 4) / COMx->UART_BaudRate;  //按1T计算
 113   3            if(j >= 65536UL)  return 2; //错误
 114   3            j = 65536UL - j;
 115   3            AUXR &= ~(1<<4);  //Timer stop
 116   3            AUXR &= ~(1<<3);  //Timer2 set As Timer
C51 COMPILER V9.60.7.0   USART                                                             12/20/2023 11:03:57 PAGE 3   

 117   3            AUXR |=  (1<<2);  //Timer2 set as 1T mode
 118   3            T2H = (uint8_t)(j>>8);
 119   3            T2L = (uint8_t)j;
 120   3            IE2  &= ~(1<<2);  //禁止中断
 121   3            AUXR |=  (1<<4);  //Timer run enable
 122   3          }
 123   2          else  return 2; //模式错误
 124   2          if(COMx->UART_Interrupt == ENABLE)  IE2   |=  1;    //允许中断
 125   2          else                IE2   &= ~1;    //禁止中断
 126   2          if(COMx->UART_RxEnable == ENABLE) S2CON |=  (1<<4); //允许接收
 127   2          else                S2CON &= ~(1<<4); //禁止接收
 128   2          P_SW2 = (P_SW2 & ~1) | (COMx->UART_P_SW & 0x01);  //切换IO
 129   2        }
 130   1        return  0;
 131   1      }
 132          
 133          
 134          
 135          /********************* UART1中断函数************************/
 136          //void UART1_int (void) interrupt UART1_VECTOR
 137          //{
 138          //  if(RI)
 139          //  {
 140          //    RI = 0;
 141          //    if(COM1.B_RX_OK == 0)
 142          //    {
 143          //      if(COM1.RX_Cnt >= COM_RX1_Lenth)  COM1.RX_Cnt = 0;
 144          //      RX1_Buffer[COM1.RX_Cnt++] = SBUF;
 145          //      COM1.RX_TimeOut = TimeOutSet1;
 146          //    }
 147          //  }
 148          
 149          //  if(TI)
 150          //  {
 151          //    TI = 0;
 152          //    if(COM1.TX_read != COM1.TX_write)
 153          //    {
 154          //      SBUF = TX1_Buffer[COM1.TX_read];
 155          //      if(++COM1.TX_read >= COM_TX1_Lenth)   COM1.TX_read = 0;
 156          //    }
 157          //    else  COM1.B_TX_busy = 0;
 158          //  }
 159          //}
 160          
 161          /********************* UART2中断函数************************/
 162          //void UART2_int (void) interrupt UART2_VECTOR
 163          //{
 164          //  if(RI2)
 165          //  {
 166          //    CLR_RI2();
 167          //    if(COM2.B_RX_OK == 0)
 168          //    {
 169          //      if(COM2.RX_Cnt >= COM_RX2_Lenth)  COM2.RX_Cnt = 0;
 170          //      RX2_Buffer[COM2.RX_Cnt++] = S2BUF;
 171          //      COM2.RX_TimeOut = TimeOutSet2;
 172          //    }
 173          //  }
 174          
 175          //  if(TI2)
 176          //  {
 177          //    CLR_TI2();
 178          //    if(COM2.TX_read != COM2.TX_write)
C51 COMPILER V9.60.7.0   USART                                                             12/20/2023 11:03:57 PAGE 4   

 179          //    {
 180          //      S2BUF = TX2_Buffer[COM2.TX_read];
 181          //      if(++COM2.TX_read >= COM_TX2_Lenth)   COM2.TX_read = 0;
 182          //    }
 183          //    else  COM2.B_TX_busy = 0;
 184          //  }
 185          
 186          //}
 187          
 188          
 189          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    708    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       8
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
